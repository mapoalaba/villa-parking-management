{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n\n// const AddressInput = () => {\n//   const [form, setForm] = useState({\n//     villaName: '',\n//     address: ''\n//   });\n//   const navigate = useNavigate();\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setForm({\n//       ...form,\n//       [name]: value,\n//     });\n//   };\n\n//   const handleAddressSearch = () => {\n//     new window.daum.Postcode({\n//       oncomplete: function (data) {\n//         setForm((prevForm) => ({\n//           ...prevForm,\n//           address: data.address,\n//         }));\n//       },\n//     }).open();\n//   };\n\n//   const handleNext = () => {\n//     navigate('/register-villa/parking', { state: { ...form } });\n//   };\n\n//   return (\n//     <div>\n//       <h2>내 빌라 등록 - 주소 입력</h2>\n//       <div>\n//         <label>Villa Name:</label>\n//         <input \n//           type=\"text\" \n//           name=\"villaName\" \n//           value={form.villaName} \n//           onChange={handleChange} \n//           required \n//         />\n//       </div>\n//       <div>\n//         <label>Address:</label>\n//         <input \n//           type=\"text\" \n//           name=\"address\" \n//           value={form.address} \n//           readOnly \n//           required \n//         />\n//         <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\n//       </div>\n//       <button \n//         type=\"button\" \n//         onClick={handleNext} \n//         disabled={!form.villaName || !form.address}\n//       >\n//         Next\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default AddressInput;","map":{"version":3,"names":[],"sources":["C:/villa-parking-management/frontend/src/components/AddressInput.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// const AddressInput = () => {\r\n//   const [form, setForm] = useState({\r\n//     villaName: '',\r\n//     address: ''\r\n//   });\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setForm({\r\n//       ...form,\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   const handleAddressSearch = () => {\r\n//     new window.daum.Postcode({\r\n//       oncomplete: function (data) {\r\n//         setForm((prevForm) => ({\r\n//           ...prevForm,\r\n//           address: data.address,\r\n//         }));\r\n//       },\r\n//     }).open();\r\n//   };\r\n\r\n//   const handleNext = () => {\r\n//     navigate('/register-villa/parking', { state: { ...form } });\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>내 빌라 등록 - 주소 입력</h2>\r\n//       <div>\r\n//         <label>Villa Name:</label>\r\n//         <input \r\n//           type=\"text\" \r\n//           name=\"villaName\" \r\n//           value={form.villaName} \r\n//           onChange={handleChange} \r\n//           required \r\n//         />\r\n//       </div>\r\n//       <div>\r\n//         <label>Address:</label>\r\n//         <input \r\n//           type=\"text\" \r\n//           name=\"address\" \r\n//           value={form.address} \r\n//           readOnly \r\n//           required \r\n//         />\r\n//         <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\r\n//       </div>\r\n//       <button \r\n//         type=\"button\" \r\n//         onClick={handleNext} \r\n//         disabled={!form.villaName || !form.address}\r\n//       >\r\n//         Next\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AddressInput;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}