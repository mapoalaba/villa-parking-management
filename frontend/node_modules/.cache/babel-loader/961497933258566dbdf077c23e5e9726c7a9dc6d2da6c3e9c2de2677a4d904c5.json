{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import '../styles/Register.css';\n// import { useNavigate } from 'react-router-dom';\n\n// axios.defaults.withCredentials = true;\n\n// const Register = () => {\n//     const navigate = useNavigate();\n//     const [step, setStep] = useState(1);\n\n//     const [form, setForm] = useState({\n//         username: '',\n//         password: '',\n//         confirmPassword: '',\n//         phone: '',\n//         address: '',\n//         detailedAddress: '',\n//         vehicleType: '승용차',\n//         vehicleNumberPrefix: '',\n//         vehicleNumberMiddle: '',\n//         vehicleNumberSuffix: '',\n//         vehicleName: ''\n//     });\n\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\n//     const [verificationCode, setVerificationCode] = useState('');\n//     const [isVerified, setIsVerified] = useState(false);\n//     const [vehicleNumberMiddleOptions, setVehicleNumberMiddleOptions] = useState([]);\n\n//     useEffect(() => {\n//         updateVehicleNumberMiddleOptions(form.vehicleType);\n//     }, [form.vehicleType]);\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setForm({\n//             ...form,\n//             [name]: value,\n//         });\n\n//         if (name === 'username') {\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\n//         }\n//     };\n\n//     const updateVehicleNumberMiddleOptions = (vehicleType) => {\n//         const options = ['가', '나', '다', '라', '마', '거', '너', '더', '러', '머', '고', '노', '도', '로', '모', '구', '누', '두', '루', '무', '바', '사', '아', '자', '허', '하', '호'];\n//         setVehicleNumberMiddleOptions(options);\n//     };\n\n//     const checkUsernameAvailability = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\n//             setUsernameAvailable(response.data.available);\n//             if (response.data.available) {\n//                 alert('Username is available');\n//             } else {\n//                 alert('Username is already taken');\n//             }\n//         } catch (error) {\n//             console.error('There was an error checking the username!', error);\n//         }\n//     };\n\n//     const sendVerificationCode = async () => {\n//         try {\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\n//             alert('Verification code sent!');\n//         } catch (error) {\n//             console.error('There was an error sending the verification code!', error);\n//         }\n//     };\n\n//     const verifyCode = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\n//             if (response.status === 200) {\n//                 setIsVerified(true);\n//                 alert('Phone number verified!');\n//             }\n//         } catch (error) {\n//             console.error('There was an error verifying the code!', error);\n//             alert('Invalid verification code!');\n//         }\n//     };\n\n//     const validateForm = () => {\n//         const usernameRegex = /^[a-zA-Z0-9]{8,20}$/;\n//         const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{4,20}$/;\n//         const phoneRegex = /^(010\\d{4}\\d{4}|010-\\d{4}-\\d{4})$/;\n//         const vehicleNumberPrefixRegex = /^[0-9]{2,3}$/;\n//         const vehicleNumberSuffixRegex = /^\\d{4}$/;\n\n//         if (!usernameRegex.test(form.username)) {\n//             alert(\"Username must be 8-20 characters long.\");\n//             return false;\n//         }\n\n//         if (!passwordRegex.test(form.password)) {\n//             alert(\"Password must be 4-20 characters long, with at least one uppercase letter and one special character.\");\n//             return false;\n//         }\n\n//         if (!phoneRegex.test(form.phone)) {\n//             alert(\"Phone number must be in the format 01000000000 or 010-0000-0000.\");\n//             return false;\n//         }\n\n//         if (!vehicleNumberPrefixRegex.test(form.vehicleNumberPrefix)) {\n//             alert(\"Vehicle number prefix must be 2-3 digits.\");\n//             return false;\n//         }\n\n//         if (!vehicleNumberSuffixRegex.test(form.vehicleNumberSuffix)) {\n//             alert(\"Vehicle number suffix must be 4 digits.\");\n//             return false;\n//         }\n\n//         return true;\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         if (!validateForm()) {\n//             return;\n//         }\n\n//         if (form.password !== form.confirmPassword) {\n//             alert(\"Passwords don't match!\");\n//             return;\n//         }\n\n//         if (usernameAvailable === false) {\n//             alert(\"Username is already taken!\");\n//             return;\n//         }\n\n//         if (!isVerified) {\n//             alert(\"Phone number is not verified!\");\n//             return;\n//         }\n\n//         const vehicleNumber = `${form.vehicleNumberPrefix}-${form.vehicleNumberMiddle}-${form.vehicleNumberSuffix}`;\n//         const fullAddress = `${form.address} (${form.detailedAddress})`;\n\n//         try {\n//             await axios.post('http://localhost:3001/api/user/register', {\n//                 ...form,\n//                 vehicleNumber,\n//                 address: fullAddress\n//             });\n//             alert('Registration successful!');\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\n//         } catch (error) {\n//             console.error('There was an error during the registration!', error);\n//         }\n//     };\n\n//     const handleAddressSearch = () => {\n//         new window.daum.Postcode({\n//             oncomplete: function (data) {\n//                 setForm({\n//                     ...form,\n//                     address: data.address,\n//                 });\n//             },\n//         }).open();\n//     };\n\n//     const nextStep = () => {\n//         if (step === 1) {\n//             // Validate first step inputs\n//             if (!form.username || !form.password || !form.confirmPassword || !form.address) {\n//                 alert('Please fill in all required fields.');\n//                 return;\n//             }\n//         } else if (step === 2) {\n//             // Validate second step inputs\n//             if (!form.phone || !verificationCode) {\n//                 alert('Please fill in all required fields.');\n//                 return;\n//             }\n//         }\n//         setStep(step + 1);\n//     };\n\n//     const prevStep = () => {\n//         setStep(step - 1);\n//     };\n\n//     return (\n//         <div className=\"register-container\">\n//             <h2>Register</h2>\n//             <div className=\"status\">\n//                 <div className={`step-indicator ${step === 1 ? 'active' : ''}`}></div>\n//                 <div className={`step-indicator ${step === 2 ? 'active' : ''}`}></div>\n//                 <div className={`step-indicator ${step === 3 ? 'active' : ''}`}></div>\n//             </div>\n//             <form onSubmit={handleSubmit}>\n//                 {step === 1 && (\n//                     <div className=\"step active\">\n//                         <div className=\"input-group\">\n//                             <label>Username:</label>\n//                             <div className=\"input-with-button\">\n//                                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required maxLength=\"20\" placeholder='8 ~ 20글자'/>\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={checkUsernameAvailability}>Check</button>\n//                             </div>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Password:</label>\n//                             <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required maxLength=\"20\" placeholder='4 ~ 20글자'/>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Confirm Password:</label>\n//                             <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required maxLength=\"20\" placeholder='비밀번호 확인'/>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Address:</label>\n//                             <div className=\"input-with-button\">\n//                                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\n//                                 <button type=\"button\" className=\"btn search-btn\" onClick={handleAddressSearch}>Search</button>\n//                             </div>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Detailed Address (Optional):</label>\n//                             <input type=\"text\" name=\"detailedAddress\" value={form.detailedAddress} onChange={handleChange} placeholder='(선택사항)'/>\n//                         </div>\n//                         <div className=\"button-group\">\n//                             <button type=\"button\" className=\"btn next-btn\" onClick={nextStep}>Next</button>\n//                         </div>\n//                     </div>\n//                 )}\n\n//                 {step === 2 && (\n//                     <div className=\"step active\">\n//                         <div className=\"input-group\">\n//                             <label>Phone:</label>\n//                             <div className=\"input-with-button\">\n//                                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required placeholder='전화번호 ( - 빼고 입력)'/>\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={sendVerificationCode}>Send</button>\n//                             </div>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Verification Code:</label>\n//                             <div className=\"input-with-button\">\n//                                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required placeholder='확인 코드'/>\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={verifyCode}>Verify</button>\n//                             </div>\n//                         </div>\n//                         <div className=\"button-group\">\n//                             <button type=\"button\" className=\"btn prev-btn\" onClick={prevStep}>Previous</button>\n//                             <button type=\"button\" className=\"btn next-btn\" onClick={nextStep}>Next</button>\n//                         </div>\n//                     </div>\n//                 )}\n\n//                 {step === 3 && (\n//                     <div className=\"step active\">\n//                         <div className=\"input-group\">\n//                             <label>Vehicle Name:</label>\n//                             <input type=\"text\" name=\"vehicleName\" value={form.vehicleName} onChange={handleChange} required placeholder='차 이름'/>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Vehicle Type:</label>\n//                             <select name=\"vehicleType\" value={form.vehicleType} onChange={handleChange} required>\n//                                 <option value=\"승용차\">승용차</option>\n//                                 <option value=\"승합차\">승합차</option>\n//                                 <option value=\"화물차\">화물차</option>\n//                                 <option value=\"오토바이\">오토바이</option>\n//                             </select>\n//                         </div>\n//                         <div className=\"input-group\">\n//                             <label>Vehicle Number:</label>\n//                             <input type=\"text\" name=\"vehicleNumberPrefix\" value={form.vehicleNumberPrefix} onChange={handleChange} required />\n//                             <select name=\"vehicleNumberMiddle\" value={form.vehicleNumberMiddle} onChange={handleChange} required>\n//                                 <option value=\"\">Select</option>\n//                                 {vehicleNumberMiddleOptions.map((option) => (\n//                                     <option key={option} value={option}>{option}</option>\n//                                 ))}\n//                             </select>\n//                             <input type=\"text\" name=\"vehicleNumberSuffix\" value={form.vehicleNumberSuffix} onChange={handleChange} required/>\n//                         </div>\n//                         <div className=\"button-group\">\n//                             <button type=\"button\" className=\"btn prev-btn\" onClick={prevStep}>Previous</button>\n//                             <button type=\"submit\" className=\"btn submit-btn\">Register</button>\n//                         </div>\n//                     </div>\n//                 )}\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default Register;","map":{"version":3,"names":[],"sources":["C:/villa-parking-management/frontend/src/components/Register.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import '../styles/Register.css';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// axios.defaults.withCredentials = true;\r\n\r\n// const Register = () => {\r\n//     const navigate = useNavigate();\r\n//     const [step, setStep] = useState(1);\r\n\r\n//     const [form, setForm] = useState({\r\n//         username: '',\r\n//         password: '',\r\n//         confirmPassword: '',\r\n//         phone: '',\r\n//         address: '',\r\n//         detailedAddress: '',\r\n//         vehicleType: '승용차',\r\n//         vehicleNumberPrefix: '',\r\n//         vehicleNumberMiddle: '',\r\n//         vehicleNumberSuffix: '',\r\n//         vehicleName: ''\r\n//     });\r\n\r\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n//     const [verificationCode, setVerificationCode] = useState('');\r\n//     const [isVerified, setIsVerified] = useState(false);\r\n//     const [vehicleNumberMiddleOptions, setVehicleNumberMiddleOptions] = useState([]);\r\n\r\n//     useEffect(() => {\r\n//         updateVehicleNumberMiddleOptions(form.vehicleType);\r\n//     }, [form.vehicleType]);\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setForm({\r\n//             ...form,\r\n//             [name]: value,\r\n//         });\r\n\r\n//         if (name === 'username') {\r\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\r\n//         }\r\n//     };\r\n\r\n//     const updateVehicleNumberMiddleOptions = (vehicleType) => {\r\n//         const options = ['가', '나', '다', '라', '마', '거', '너', '더', '러', '머', '고', '노', '도', '로', '모', '구', '누', '두', '루', '무', '바', '사', '아', '자', '허', '하', '호'];\r\n//         setVehicleNumberMiddleOptions(options);\r\n//     };\r\n\r\n//     const checkUsernameAvailability = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\r\n//             setUsernameAvailable(response.data.available);\r\n//             if (response.data.available) {\r\n//                 alert('Username is available');\r\n//             } else {\r\n//                 alert('Username is already taken');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('There was an error checking the username!', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendVerificationCode = async () => {\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\r\n//             alert('Verification code sent!');\r\n//         } catch (error) {\r\n//             console.error('There was an error sending the verification code!', error);\r\n//         }\r\n//     };\r\n\r\n//     const verifyCode = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\r\n//             if (response.status === 200) {\r\n//                 setIsVerified(true);\r\n//                 alert('Phone number verified!');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('There was an error verifying the code!', error);\r\n//             alert('Invalid verification code!');\r\n//         }\r\n//     };\r\n\r\n//     const validateForm = () => {\r\n//         const usernameRegex = /^[a-zA-Z0-9]{8,20}$/;\r\n//         const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{4,20}$/;\r\n//         const phoneRegex = /^(010\\d{4}\\d{4}|010-\\d{4}-\\d{4})$/;\r\n//         const vehicleNumberPrefixRegex = /^[0-9]{2,3}$/;\r\n//         const vehicleNumberSuffixRegex = /^\\d{4}$/;\r\n\r\n//         if (!usernameRegex.test(form.username)) {\r\n//             alert(\"Username must be 8-20 characters long.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!passwordRegex.test(form.password)) {\r\n//             alert(\"Password must be 4-20 characters long, with at least one uppercase letter and one special character.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!phoneRegex.test(form.phone)) {\r\n//             alert(\"Phone number must be in the format 01000000000 or 010-0000-0000.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!vehicleNumberPrefixRegex.test(form.vehicleNumberPrefix)) {\r\n//             alert(\"Vehicle number prefix must be 2-3 digits.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!vehicleNumberSuffixRegex.test(form.vehicleNumberSuffix)) {\r\n//             alert(\"Vehicle number suffix must be 4 digits.\");\r\n//             return false;\r\n//         }\r\n\r\n//         return true;\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         if (!validateForm()) {\r\n//             return;\r\n//         }\r\n\r\n//         if (form.password !== form.confirmPassword) {\r\n//             alert(\"Passwords don't match!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (usernameAvailable === false) {\r\n//             alert(\"Username is already taken!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!isVerified) {\r\n//             alert(\"Phone number is not verified!\");\r\n//             return;\r\n//         }\r\n\r\n//         const vehicleNumber = `${form.vehicleNumberPrefix}-${form.vehicleNumberMiddle}-${form.vehicleNumberSuffix}`;\r\n//         const fullAddress = `${form.address} (${form.detailedAddress})`;\r\n\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/register', {\r\n//                 ...form,\r\n//                 vehicleNumber,\r\n//                 address: fullAddress\r\n//             });\r\n//             alert('Registration successful!');\r\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n//         } catch (error) {\r\n//             console.error('There was an error during the registration!', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddressSearch = () => {\r\n//         new window.daum.Postcode({\r\n//             oncomplete: function (data) {\r\n//                 setForm({\r\n//                     ...form,\r\n//                     address: data.address,\r\n//                 });\r\n//             },\r\n//         }).open();\r\n//     };\r\n\r\n//     const nextStep = () => {\r\n//         if (step === 1) {\r\n//             // Validate first step inputs\r\n//             if (!form.username || !form.password || !form.confirmPassword || !form.address) {\r\n//                 alert('Please fill in all required fields.');\r\n//                 return;\r\n//             }\r\n//         } else if (step === 2) {\r\n//             // Validate second step inputs\r\n//             if (!form.phone || !verificationCode) {\r\n//                 alert('Please fill in all required fields.');\r\n//                 return;\r\n//             }\r\n//         }\r\n//         setStep(step + 1);\r\n//     };\r\n\r\n//     const prevStep = () => {\r\n//         setStep(step - 1);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"register-container\">\r\n//             <h2>Register</h2>\r\n//             <div className=\"status\">\r\n//                 <div className={`step-indicator ${step === 1 ? 'active' : ''}`}></div>\r\n//                 <div className={`step-indicator ${step === 2 ? 'active' : ''}`}></div>\r\n//                 <div className={`step-indicator ${step === 3 ? 'active' : ''}`}></div>\r\n//             </div>\r\n//             <form onSubmit={handleSubmit}>\r\n//                 {step === 1 && (\r\n//                     <div className=\"step active\">\r\n//                         <div className=\"input-group\">\r\n//                             <label>Username:</label>\r\n//                             <div className=\"input-with-button\">\r\n//                                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required maxLength=\"20\" placeholder='8 ~ 20글자'/>\r\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={checkUsernameAvailability}>Check</button>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Password:</label>\r\n//                             <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required maxLength=\"20\" placeholder='4 ~ 20글자'/>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Confirm Password:</label>\r\n//                             <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required maxLength=\"20\" placeholder='비밀번호 확인'/>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Address:</label>\r\n//                             <div className=\"input-with-button\">\r\n//                                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\r\n//                                 <button type=\"button\" className=\"btn search-btn\" onClick={handleAddressSearch}>Search</button>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Detailed Address (Optional):</label>\r\n//                             <input type=\"text\" name=\"detailedAddress\" value={form.detailedAddress} onChange={handleChange} placeholder='(선택사항)'/>\r\n//                         </div>\r\n//                         <div className=\"button-group\">\r\n//                             <button type=\"button\" className=\"btn next-btn\" onClick={nextStep}>Next</button>\r\n//                         </div>\r\n//                     </div>\r\n//                 )}\r\n\r\n//                 {step === 2 && (\r\n//                     <div className=\"step active\">\r\n//                         <div className=\"input-group\">\r\n//                             <label>Phone:</label>\r\n//                             <div className=\"input-with-button\">\r\n//                                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required placeholder='전화번호 ( - 빼고 입력)'/>\r\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={sendVerificationCode}>Send</button>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Verification Code:</label>\r\n//                             <div className=\"input-with-button\">\r\n//                                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required placeholder='확인 코드'/>\r\n//                                 <button type=\"button\" className=\"btn check-btn\" onClick={verifyCode}>Verify</button>\r\n//                             </div>\r\n//                         </div>\r\n//                         <div className=\"button-group\">\r\n//                             <button type=\"button\" className=\"btn prev-btn\" onClick={prevStep}>Previous</button>\r\n//                             <button type=\"button\" className=\"btn next-btn\" onClick={nextStep}>Next</button>\r\n//                         </div>\r\n//                     </div>\r\n//                 )}\r\n\r\n//                 {step === 3 && (\r\n//                     <div className=\"step active\">\r\n//                         <div className=\"input-group\">\r\n//                             <label>Vehicle Name:</label>\r\n//                             <input type=\"text\" name=\"vehicleName\" value={form.vehicleName} onChange={handleChange} required placeholder='차 이름'/>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Vehicle Type:</label>\r\n//                             <select name=\"vehicleType\" value={form.vehicleType} onChange={handleChange} required>\r\n//                                 <option value=\"승용차\">승용차</option>\r\n//                                 <option value=\"승합차\">승합차</option>\r\n//                                 <option value=\"화물차\">화물차</option>\r\n//                                 <option value=\"오토바이\">오토바이</option>\r\n//                             </select>\r\n//                         </div>\r\n//                         <div className=\"input-group\">\r\n//                             <label>Vehicle Number:</label>\r\n//                             <input type=\"text\" name=\"vehicleNumberPrefix\" value={form.vehicleNumberPrefix} onChange={handleChange} required />\r\n//                             <select name=\"vehicleNumberMiddle\" value={form.vehicleNumberMiddle} onChange={handleChange} required>\r\n//                                 <option value=\"\">Select</option>\r\n//                                 {vehicleNumberMiddleOptions.map((option) => (\r\n//                                     <option key={option} value={option}>{option}</option>\r\n//                                 ))}\r\n//                             </select>\r\n//                             <input type=\"text\" name=\"vehicleNumberSuffix\" value={form.vehicleNumberSuffix} onChange={handleChange} required/>\r\n//                         </div>\r\n//                         <div className=\"button-group\">\r\n//                             <button type=\"button\" className=\"btn prev-btn\" onClick={prevStep}>Previous</button>\r\n//                             <button type=\"submit\" className=\"btn submit-btn\">Register</button>\r\n//                         </div>\r\n//                     </div>\r\n//                 )}\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default Register;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}