{"ast":null,"code":"// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// axios.defaults.withCredentials = true;\n\n// const Register = () => {\n//     const navigate = useNavigate();\n\n//     const [form, setForm] = useState({\n//         username: '',\n//         password: '',\n//         confirmPassword: '',\n//         phone: '',\n//         address: '',\n//         vehicleNumber: '',\n//         vehicleName: '',\n//     });\n\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\n//     const [verificationCode, setVerificationCode] = useState('');\n//     const [isVerified, setIsVerified] = useState(false);\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setForm({\n//             ...form,\n//             [name]: value,\n//         });\n\n//         if (name === 'username') {\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\n//         }\n//     };\n\n//     const checkUsernameAvailability = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\n//             setUsernameAvailable(response.data.available);\n//         } catch (error) {\n//             console.error('There was an error checking the username!', error);\n//         }\n//     };\n\n//     const sendVerificationCode = async () => {\n//         try {\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\n//             alert('Verification code sent!');\n//         } catch (error) {\n//             console.error('There was an error sending the verification code!', error);\n//         }\n//     };\n\n//     const verifyCode = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\n//             if (response.status === 200) {\n//                 setIsVerified(true);\n//                 alert('Phone number verified!');\n//             }\n//         } catch (error) {\n//             console.error('There was an error verifying the code!', error);\n//             alert('Invalid verification code!');\n//         }\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         if (form.password !== form.confirmPassword) {\n//             alert(\"Passwords don't match!\");\n//             return;\n//         }\n\n//         if (usernameAvailable === false) {\n//             alert(\"Username is already taken!\");\n//             return;\n//         }\n\n//         if (!isVerified) {\n//             alert(\"Phone number is not verified!\");\n//             return;\n//         }\n\n//         try {\n//             await axios.post('http://localhost:3001/api/user/register', form);\n//             alert('Registration successful!');\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\n//         } catch (error) {\n//             console.error('There was an error during the registration!', error);\n//         }\n//     };\n\n//     const handleAddressSearch = () => {\n//         new window.daum.Postcode({\n//             oncomplete: function (data) {\n//                 setForm({\n//                     ...form,\n//                     address: data.address,\n//                 });\n//             },\n//         }).open();\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <div>\n//                 <label>Username:</label>\n//                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required />\n//                 <button type=\"button\" onClick={checkUsernameAvailability}>Check Availability</button>\n//                 {usernameAvailable === false && <span>Username is already taken</span>}\n//                 {usernameAvailable === true && <span>Username is available</span>}\n//             </div>\n//             <div>\n//                 <label>Password:</label>\n//                 <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required />\n//             </div>\n//             <div>\n//                 <label>Confirm Password:</label>\n//                 <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required />\n//             </div>\n//             <div>\n//                 <label>Phone:</label>\n//                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required />\n//                 <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\n//             </div>\n//             <div>\n//                 <label>Verification Code:</label>\n//                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required />\n//                 <button type=\"button\" onClick={verifyCode}>Verify Code</button>\n//             </div>\n//             <div>\n//                 <label>Address:</label>\n//                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\n//                 <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\n//             </div>\n//             <div>\n//                 <label>Vehicle Number:</label>\n//                 <input type=\"text\" name=\"vehicleNumber\" value={form.vehicleNumber} onChange={handleChange} required />\n//             </div>\n//             <div>\n//                 <label>Vehicle Name:</label>\n//                 <input type=\"text\" name=\"vehicleName\" value={form.vehicleName} onChange={handleChange} required />\n//             </div>\n//             <button type=\"submit\">Register</button>\n//         </form>\n//     );\n// };\n\n// export default Register;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import { useNavigate } from 'react-router-dom';\n\n// axios.defaults.withCredentials = true;\n\n// const Register = () => {\n//     const navigate = useNavigate();\n\n//     const [form, setForm] = useState({\n//         username: '',\n//         password: '',\n//         confirmPassword: '',\n//         phone: '',\n//         address: '',\n//         vehicleType: '승용차',\n//         vehicleNumberPrefix: '',\n//         vehicleNumberMiddle: '',\n//         vehicleNumberSuffix: '',\n//     });\n\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\n//     const [verificationCode, setVerificationCode] = useState('');\n//     const [isVerified, setIsVerified] = useState(false);\n//     const [vehicleNumberPrefixOptions, setVehicleNumberPrefixOptions] = useState([]);\n\n//     const handleChange = (e) => {\n//         const { name, value } = e.target;\n//         setForm({\n//             ...form,\n//             [name]: value,\n//         });\n\n//         if (name === 'username') {\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\n//         }\n\n//         if (name === 'vehicleType') {\n//             updateVehicleNumberPrefixOptions(value);\n//         }\n//     };\n\n//     const updateVehicleNumberPrefixOptions = (vehicleType) => {\n//         let options = [];\n//         if (vehicleType === '승용차') {\n//             options = [...Array(70).keys()].map(i => (i + 1).toString().padStart(2, '0')).concat([...Array(600).keys()].map(i => (i + 100).toString()));\n//         } else if (vehicleType === '승합차') {\n//             options = [...Array(10).keys()].map(i => (i + 70).toString()).concat([...Array(100).keys()].map(i => (i + 700).toString()));\n//         } else if (vehicleType === '화물차') {\n//             options = [...Array(18).keys()].map(i => (i + 80).toString()).concat([...Array(18).keys()].map(i => (i + 980).toString()));\n//         }\n//         setVehicleNumberPrefixOptions(options);\n//     };\n\n//     const checkUsernameAvailability = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\n//             setUsernameAvailable(response.data.available);\n//         } catch (error) {\n//             console.error('There was an error checking the username!', error);\n//         }\n//     };\n\n//     const sendVerificationCode = async () => {\n//         try {\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\n//             alert('Verification code sent!');\n//         } catch (error) {\n//             console.error('There was an error sending the verification code!', error);\n//         }\n//     };\n\n//     const verifyCode = async () => {\n//         try {\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\n//             if (response.status === 200) {\n//                 setIsVerified(true);\n//                 alert('Phone number verified!');\n//             }\n//         } catch (error) {\n//             console.error('There was an error verifying the code!', error);\n//             alert('Invalid verification code!');\n//         }\n//     };\n\n//     const validateForm = () => {\n//         const usernameRegex = /^[a-zA-Z0-9]{8,20}$/;\n//         const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{4,20}$/;\n//         const phoneRegex = /^(010\\d{4}\\d{4}|010-\\d{4}-\\d{4})$/;\n//         const vehicleNumberMiddleRegex = /^[가-호]$/;\n//         const vehicleNumberSuffixRegex = /^\\d{4}$/;\n\n//         if (!usernameRegex.test(form.username)) {\n//             alert(\"Username must be 8-20 characters long.\");\n//             return false;\n//         }\n\n//         if (!passwordRegex.test(form.password)) {\n//             alert(\"Password must be 4-20 characters long, with at least one uppercase letter and one special character.\");\n//             return false;\n//         }\n\n//         if (!phoneRegex.test(form.phone)) {\n//             alert(\"Phone number must be in the format 01000000000 or 010-0000-0000.\");\n//             return false;\n//         }\n\n//         if (!vehicleNumberMiddleRegex.test(form.vehicleNumberMiddle)) {\n//             alert(\"Vehicle number middle part must be one of the allowed Korean characters.\");\n//             return false;\n//         }\n\n//         if (!vehicleNumberSuffixRegex.test(form.vehicleNumberSuffix)) {\n//             alert(\"Vehicle number suffix must be 4 digits.\");\n//             return false;\n//         }\n\n//         return true;\n//     };\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         if (!validateForm()) {\n//             return;\n//         }\n\n//         if (form.password !== form.confirmPassword) {\n//             alert(\"Passwords don't match!\");\n//             return;\n//         }\n\n//         if (usernameAvailable === false) {\n//             alert(\"Username is already taken!\");\n//             return;\n//         }\n\n//         if (!isVerified) {\n//             alert(\"Phone number is not verified!\");\n//             return;\n//         }\n\n//         const vehicleNumber = `${form.vehicleNumberPrefix}-${form.vehicleNumberMiddle}-${form.vehicleNumberSuffix}`;\n\n//         try {\n//             await axios.post('http://localhost:3001/api/user/register', { ...form, vehicleNumber });\n//             alert('Registration successful!');\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\n//         } catch (error) {\n//             console.error('There was an error during the registration!', error);\n//         }\n//     };\n\n//     const handleAddressSearch = () => {\n//         new window.daum.Postcode({\n//             oncomplete: function (data) {\n//                 setForm({\n//                     ...form,\n//                     address: data.address,\n//                 });\n//             },\n//         }).open();\n//     };\n\n//     return (\n//         <form onSubmit={handleSubmit}>\n//             <div>\n//                 <label>Username:</label>\n//                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required />\n//                 <button type=\"button\" onClick={checkUsernameAvailability}>Check Availability</button>\n//                 {usernameAvailable === false && <span>Username is already taken</span>}\n//                 {usernameAvailable === true && <span>Username is available</span>}\n//             </div>\n//             <div>\n//                 <label>Password:</label>\n//                 <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required />\n//             </div>\n//             <div>\n//                 <label>Confirm Password:</label>\n//                 <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required />\n//             </div>\n//             <div>\n//                 <label>Phone:</label>\n//                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required />\n//                 <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\n//             </div>\n//             <div>\n//                 <label>Verification Code:</label>\n//                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required />\n//                 <button type=\"button\" onClick={verifyCode}>Verify Code</button>\n//             </div>\n//             <div>\n//                 <label>Address:</label>\n//                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\n//                 <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\n//             </div>\n//             <div>\n//                 <label>Vehicle Type:</label>\n//                 <select name=\"vehicleType\" value={form.vehicleType} onChange={handleChange} required>\n//                     <option value=\"승용차\">승용차</option>\n//                     <option value=\"승합차\">승합차</option>\n//                     <option value=\"화물차\">화물차</option>\n//                 </select>\n//             </div>\n//             <div>\n//                 <label>Vehicle Number:</label>\n//                 <select name=\"vehicleNumberPrefix\" value={form.vehicleNumberPrefix} onChange={handleChange} required>\n//                     <option value=\"\">Select Prefix</option>\n//                     {vehicleNumberPrefixOptions.map((option) => (\n//                         <option key={option} value={option}>{option}</option>\n//                     ))}\n//                 </select>\n//                 <input type=\"text\" name=\"vehicleNumberMiddle\" value={form.vehicleNumberMiddle} onChange={handleChange} required placeholder=\"가,나,다,...\" />\n//                 <input type=\"text\" name=\"vehicleNumberSuffix\" value={form.vehicleNumberSuffix} onChange={handleChange} required placeholder=\"0000\" />\n//             </div>\n//             <button type=\"submit\">Register</button>\n//         </form>\n//     );\n// };\n\n// export default Register;","map":{"version":3,"names":[],"sources":["C:/villa-parking-management/frontend/src/components/Register.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// axios.defaults.withCredentials = true;\r\n\r\n// const Register = () => {\r\n//     const navigate = useNavigate();\r\n\r\n//     const [form, setForm] = useState({\r\n//         username: '',\r\n//         password: '',\r\n//         confirmPassword: '',\r\n//         phone: '',\r\n//         address: '',\r\n//         vehicleNumber: '',\r\n//         vehicleName: '',\r\n//     });\r\n\r\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n//     const [verificationCode, setVerificationCode] = useState('');\r\n//     const [isVerified, setIsVerified] = useState(false);\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setForm({\r\n//             ...form,\r\n//             [name]: value,\r\n//         });\r\n\r\n//         if (name === 'username') {\r\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\r\n//         }\r\n//     };\r\n\r\n//     const checkUsernameAvailability = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\r\n//             setUsernameAvailable(response.data.available);\r\n//         } catch (error) {\r\n//             console.error('There was an error checking the username!', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendVerificationCode = async () => {\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\r\n//             alert('Verification code sent!');\r\n//         } catch (error) {\r\n//             console.error('There was an error sending the verification code!', error);\r\n//         }\r\n//     };\r\n\r\n//     const verifyCode = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\r\n//             if (response.status === 200) {\r\n//                 setIsVerified(true);\r\n//                 alert('Phone number verified!');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('There was an error verifying the code!', error);\r\n//             alert('Invalid verification code!');\r\n//         }\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         if (form.password !== form.confirmPassword) {\r\n//             alert(\"Passwords don't match!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (usernameAvailable === false) {\r\n//             alert(\"Username is already taken!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!isVerified) {\r\n//             alert(\"Phone number is not verified!\");\r\n//             return;\r\n//         }\r\n\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/register', form);\r\n//             alert('Registration successful!');\r\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n//         } catch (error) {\r\n//             console.error('There was an error during the registration!', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddressSearch = () => {\r\n//         new window.daum.Postcode({\r\n//             oncomplete: function (data) {\r\n//                 setForm({\r\n//                     ...form,\r\n//                     address: data.address,\r\n//                 });\r\n//             },\r\n//         }).open();\r\n//     };\r\n\r\n//     return (\r\n//         <form onSubmit={handleSubmit}>\r\n//             <div>\r\n//                 <label>Username:</label>\r\n//                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required />\r\n//                 <button type=\"button\" onClick={checkUsernameAvailability}>Check Availability</button>\r\n//                 {usernameAvailable === false && <span>Username is already taken</span>}\r\n//                 {usernameAvailable === true && <span>Username is available</span>}\r\n//             </div>\r\n//             <div>\r\n//                 <label>Password:</label>\r\n//                 <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required />\r\n//             </div>\r\n//             <div>\r\n//                 <label>Confirm Password:</label>\r\n//                 <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required />\r\n//             </div>\r\n//             <div>\r\n//                 <label>Phone:</label>\r\n//                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required />\r\n//                 <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Verification Code:</label>\r\n//                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required />\r\n//                 <button type=\"button\" onClick={verifyCode}>Verify Code</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Address:</label>\r\n//                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\r\n//                 <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Vehicle Number:</label>\r\n//                 <input type=\"text\" name=\"vehicleNumber\" value={form.vehicleNumber} onChange={handleChange} required />\r\n//             </div>\r\n//             <div>\r\n//                 <label>Vehicle Name:</label>\r\n//                 <input type=\"text\" name=\"vehicleName\" value={form.vehicleName} onChange={handleChange} required />\r\n//             </div>\r\n//             <button type=\"submit\">Register</button>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n// export default Register;\r\n\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// axios.defaults.withCredentials = true;\r\n\r\n// const Register = () => {\r\n//     const navigate = useNavigate();\r\n\r\n//     const [form, setForm] = useState({\r\n//         username: '',\r\n//         password: '',\r\n//         confirmPassword: '',\r\n//         phone: '',\r\n//         address: '',\r\n//         vehicleType: '승용차',\r\n//         vehicleNumberPrefix: '',\r\n//         vehicleNumberMiddle: '',\r\n//         vehicleNumberSuffix: '',\r\n//     });\r\n\r\n//     const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n//     const [verificationCode, setVerificationCode] = useState('');\r\n//     const [isVerified, setIsVerified] = useState(false);\r\n//     const [vehicleNumberPrefixOptions, setVehicleNumberPrefixOptions] = useState([]);\r\n\r\n//     const handleChange = (e) => {\r\n//         const { name, value } = e.target;\r\n//         setForm({\r\n//             ...form,\r\n//             [name]: value,\r\n//         });\r\n\r\n//         if (name === 'username') {\r\n//             setUsernameAvailable(null);  // Username 변경 시 상태 초기화\r\n//         }\r\n\r\n//         if (name === 'vehicleType') {\r\n//             updateVehicleNumberPrefixOptions(value);\r\n//         }\r\n//     };\r\n\r\n//     const updateVehicleNumberPrefixOptions = (vehicleType) => {\r\n//         let options = [];\r\n//         if (vehicleType === '승용차') {\r\n//             options = [...Array(70).keys()].map(i => (i + 1).toString().padStart(2, '0')).concat([...Array(600).keys()].map(i => (i + 100).toString()));\r\n//         } else if (vehicleType === '승합차') {\r\n//             options = [...Array(10).keys()].map(i => (i + 70).toString()).concat([...Array(100).keys()].map(i => (i + 700).toString()));\r\n//         } else if (vehicleType === '화물차') {\r\n//             options = [...Array(18).keys()].map(i => (i + 80).toString()).concat([...Array(18).keys()].map(i => (i + 980).toString()));\r\n//         }\r\n//         setVehicleNumberPrefixOptions(options);\r\n//     };\r\n\r\n//     const checkUsernameAvailability = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/check-username', { username: form.username });\r\n//             setUsernameAvailable(response.data.available);\r\n//         } catch (error) {\r\n//             console.error('There was an error checking the username!', error);\r\n//         }\r\n//     };\r\n\r\n//     const sendVerificationCode = async () => {\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/send-code', { phone: form.phone });\r\n//             alert('Verification code sent!');\r\n//         } catch (error) {\r\n//             console.error('There was an error sending the verification code!', error);\r\n//         }\r\n//     };\r\n\r\n//     const verifyCode = async () => {\r\n//         try {\r\n//             const response = await axios.post('http://localhost:3001/api/user/verify-code', { code: verificationCode });\r\n//             if (response.status === 200) {\r\n//                 setIsVerified(true);\r\n//                 alert('Phone number verified!');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('There was an error verifying the code!', error);\r\n//             alert('Invalid verification code!');\r\n//         }\r\n//     };\r\n\r\n//     const validateForm = () => {\r\n//         const usernameRegex = /^[a-zA-Z0-9]{8,20}$/;\r\n//         const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{4,20}$/;\r\n//         const phoneRegex = /^(010\\d{4}\\d{4}|010-\\d{4}-\\d{4})$/;\r\n//         const vehicleNumberMiddleRegex = /^[가-호]$/;\r\n//         const vehicleNumberSuffixRegex = /^\\d{4}$/;\r\n\r\n//         if (!usernameRegex.test(form.username)) {\r\n//             alert(\"Username must be 8-20 characters long.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!passwordRegex.test(form.password)) {\r\n//             alert(\"Password must be 4-20 characters long, with at least one uppercase letter and one special character.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!phoneRegex.test(form.phone)) {\r\n//             alert(\"Phone number must be in the format 01000000000 or 010-0000-0000.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!vehicleNumberMiddleRegex.test(form.vehicleNumberMiddle)) {\r\n//             alert(\"Vehicle number middle part must be one of the allowed Korean characters.\");\r\n//             return false;\r\n//         }\r\n\r\n//         if (!vehicleNumberSuffixRegex.test(form.vehicleNumberSuffix)) {\r\n//             alert(\"Vehicle number suffix must be 4 digits.\");\r\n//             return false;\r\n//         }\r\n\r\n//         return true;\r\n//     };\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         if (!validateForm()) {\r\n//             return;\r\n//         }\r\n\r\n//         if (form.password !== form.confirmPassword) {\r\n//             alert(\"Passwords don't match!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (usernameAvailable === false) {\r\n//             alert(\"Username is already taken!\");\r\n//             return;\r\n//         }\r\n\r\n//         if (!isVerified) {\r\n//             alert(\"Phone number is not verified!\");\r\n//             return;\r\n//         }\r\n\r\n//         const vehicleNumber = `${form.vehicleNumberPrefix}-${form.vehicleNumberMiddle}-${form.vehicleNumberSuffix}`;\r\n\r\n//         try {\r\n//             await axios.post('http://localhost:3001/api/user/register', { ...form, vehicleNumber });\r\n//             alert('Registration successful!');\r\n//             navigate('/login'); // 회원가입 성공 시 로그인 페이지로 이동\r\n//         } catch (error) {\r\n//             console.error('There was an error during the registration!', error);\r\n//         }\r\n//     };\r\n\r\n//     const handleAddressSearch = () => {\r\n//         new window.daum.Postcode({\r\n//             oncomplete: function (data) {\r\n//                 setForm({\r\n//                     ...form,\r\n//                     address: data.address,\r\n//                 });\r\n//             },\r\n//         }).open();\r\n//     };\r\n\r\n//     return (\r\n//         <form onSubmit={handleSubmit}>\r\n//             <div>\r\n//                 <label>Username:</label>\r\n//                 <input type=\"text\" name=\"username\" value={form.username} onChange={handleChange} required />\r\n//                 <button type=\"button\" onClick={checkUsernameAvailability}>Check Availability</button>\r\n//                 {usernameAvailable === false && <span>Username is already taken</span>}\r\n//                 {usernameAvailable === true && <span>Username is available</span>}\r\n//             </div>\r\n//             <div>\r\n//                 <label>Password:</label>\r\n//                 <input type=\"password\" name=\"password\" value={form.password} onChange={handleChange} required />\r\n//             </div>\r\n//             <div>\r\n//                 <label>Confirm Password:</label>\r\n//                 <input type=\"password\" name=\"confirmPassword\" value={form.confirmPassword} onChange={handleChange} required />\r\n//             </div>\r\n//             <div>\r\n//                 <label>Phone:</label>\r\n//                 <input type=\"text\" name=\"phone\" value={form.phone} onChange={handleChange} required />\r\n//                 <button type=\"button\" onClick={sendVerificationCode}>Send Verification Code</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Verification Code:</label>\r\n//                 <input type=\"text\" value={verificationCode} onChange={(e) => setVerificationCode(e.target.value)} required />\r\n//                 <button type=\"button\" onClick={verifyCode}>Verify Code</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Address:</label>\r\n//                 <input type=\"text\" name=\"address\" value={form.address} onChange={handleChange} readOnly required />\r\n//                 <button type=\"button\" onClick={handleAddressSearch}>Search Address</button>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Vehicle Type:</label>\r\n//                 <select name=\"vehicleType\" value={form.vehicleType} onChange={handleChange} required>\r\n//                     <option value=\"승용차\">승용차</option>\r\n//                     <option value=\"승합차\">승합차</option>\r\n//                     <option value=\"화물차\">화물차</option>\r\n//                 </select>\r\n//             </div>\r\n//             <div>\r\n//                 <label>Vehicle Number:</label>\r\n//                 <select name=\"vehicleNumberPrefix\" value={form.vehicleNumberPrefix} onChange={handleChange} required>\r\n//                     <option value=\"\">Select Prefix</option>\r\n//                     {vehicleNumberPrefixOptions.map((option) => (\r\n//                         <option key={option} value={option}>{option}</option>\r\n//                     ))}\r\n//                 </select>\r\n//                 <input type=\"text\" name=\"vehicleNumberMiddle\" value={form.vehicleNumberMiddle} onChange={handleChange} required placeholder=\"가,나,다,...\" />\r\n//                 <input type=\"text\" name=\"vehicleNumberSuffix\" value={form.vehicleNumberSuffix} onChange={handleChange} required placeholder=\"0000\" />\r\n//             </div>\r\n//             <button type=\"submit\">Register</button>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n// export default Register;\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}